// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../avl.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _AvlGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x6f\xdb\x46\x13\x3e\x93\xbf\x62\x5e\x03\x6f\x40\x3a\x94\x2c\x2a\x97\x42\x00\x73\x4a\xda\x06\xf9\x28\x90\xa0\xbd\x18\x3a\x30\xe4\xd0\x5e\x68\xb9\x64\x97\x2b\xc7\xaa\xa0\xff\x5e\xcc\x7e\x90\x4b\x89\xb4\x93\xf6\x50\x1f\x6c\x6b\x77\xe6\x99\x99\xe7\x99\xfd\x52\x9b\x17\xbb\xfc\x0e\xa1\x91\x65\x9d\xb7\x61\xc8\xea\xb6\x91\x0a\xae\xaa\x5a\x5d\x85\xa1\x3a\xb4\x08\xef\xf1\x00\x4c\x28\x94\x55\x5e\x20\x1c\xc3\xe0\x03\x76\x5d\xf4\x1e\x0f\x31\x7c\x6d\x1a\x1e\x9e\xac\xdd\x1f\x39\xdf\xe3\x60\x79\x74\xe3\x6f\x85\x92\x07\xe8\x94\xdc\x17\x8a\xdc\x09\x0f\x08\x35\x0c\x8c\x8b\xfe\xdd\xc3\xfc\x26\xcb\x8f\x79\xeb\xd9\x1b\x7f\x00\x03\x14\x06\xf7\x60\x7f\x98\x50\x61\x50\xdc\x33\x5e\x4a\x14\x70\xbb\xde\x5e\x1b\x5f\x82\xaa\xf6\xa2\x80\x48\x80\x1d\x8a\xe1\x57\x64\x77\xf7\x2a\x8a\xc9\x8b\x50\x59\x05\x02\xb2\x0c\x04\xe3\xf4\x31\x90\xa8\xf6\x52\xc0\x2a\x0c\x4e\xa1\xfb\x20\x96\xf7\x3d\x56\xd1\xd4\x5f\x99\xc0\xf2\x0d\xb6\xea\x3e\x12\x69\x02\x62\x3d\xa0\x5b\xd0\x32\x85\x4d\x06\x22\x5d\xba\x68\x61\x50\xae\xf5\xd0\xda\x1b\x7a\xc8\x25\x94\x26\x7b\x56\x41\x99\xc2\x6b\x28\xd7\x3a\x89\x12\x32\x28\xd3\x30\x38\x01\xf2\x0e\x87\xa1\xb5\x9f\x55\x09\x2f\x21\xed\xf3\xaa\x77\x9f\x9a\x12\x23\xd4\x24\x69\x86\x12\xe0\x58\x29\x97\x5b\x02\x92\xe2\x0e\xa9\xda\x7f\x08\xdc\x02\xbe\x30\x23\x14\x4d\x03\x6c\x88\x5c\x0d\x98\x84\x41\x70\xbf\x71\x7c\x8f\x29\xa0\x20\x16\x3c\x26\x3b\x27\xc4\xc6\x53\xe2\xe8\x19\x9d\x12\x2a\x62\x90\xa6\x29\x71\x48\xea\x17\x54\xd1\x0e\x0f\xa0\xbb\x2a\x7a\x18\xda\x22\x81\x66\xa7\xdb\x2c\x76\xa2\x91\xdf\xa5\x6e\x82\xf1\x04\xaa\x9c\x77\xa8\xa9\x62\x15\xec\xf0\xb0\xd4\x9d\x4a\x1e\x4b\x5d\xd8\x52\xc3\xfb\x5e\x34\xe5\x12\xbf\x5d\x6d\x97\x36\x8f\xd8\x81\x8c\x7d\x0d\xde\xee\x49\x90\xf4\x0c\xe4\xe6\x06\xf0\xcf\x7d\xce\xc3\x91\xb9\x81\xb4\x15\x2a\x69\xda\x7f\x8a\x98\x77\xa2\x43\xd9\x73\x93\x80\x47\xcd\x48\xca\x79\x66\x6c\x83\xe8\x88\xc7\x5d\x8f\x71\x4a\x0c\x67\x82\x71\x93\x28\x0e\xbd\xe3\x7a\x86\x1a\xb7\xcf\x36\xb9\x60\xeb\x7c\x24\xdd\x7e\x07\x67\x1a\x38\x33\x01\x96\x43\x75\x36\xab\xb8\xef\xfd\xe7\x14\xd4\x3d\x9e\xe9\x74\x9f\x82\x39\x82\x13\xa0\x0b\x03\x53\x23\x64\x70\x41\x86\xbf\xbe\x64\xa3\x72\x65\x57\xd4\x88\x8f\x78\x4e\xa4\xcf\x58\x37\x0f\x38\x34\xf0\x77\xe9\x22\x18\xff\xcf\x78\x1f\x12\xfe\x67\x84\x4f\xf9\x8f\x99\xae\xf3\x47\x2a\x43\x5b\x7f\xcc\x1f\x69\xdb\xa3\x1c\x69\xd8\xa3\xa2\xa7\x9c\xb2\x0a\x03\x7f\xdf\x9b\x8a\x57\xe7\x8f\x3a\x1f\x9a\x76\x52\x5e\xd7\xf9\x23\x79\xfe\xa0\x82\xbe\xc9\x8f\x6e\x9b\xac\xb2\x34\xba\x2d\x7d\xa1\x93\xec\x4f\x98\xd7\x90\x1a\x36\x58\xdd\x72\x86\x9d\x85\xfa\x5f\x66\x34\xa7\x2d\xa1\x63\xe2\x8e\xa3\x8e\x48\xe2\x70\xe2\xca\x60\x7a\x3a\xd3\x8c\x9c\x98\x21\xbd\x29\x89\xc9\xfd\x98\xc7\x0b\x29\xcf\x72\x21\xbe\x6e\x6e\xa0\x6c\xf6\x5f\x39\x9a\xd2\x59\x23\x3c\xfe\xed\x1e\x41\x23\x81\xe4\xb6\xef\xf4\x27\xff\x78\xe9\xa9\xe4\x7e\x96\xf1\xc8\xd0\xa4\x6a\x09\xf5\x0d\xd3\x6d\x02\x52\x1a\xe3\xd8\x08\x76\x16\x7d\xe4\x3a\x1d\x37\xd6\x18\x6e\x73\x1e\xb1\xbe\x18\x4b\x72\x29\x82\x56\x77\x42\x03\xd7\x7b\x9c\xf7\x0d\x3b\xd6\x80\xcb\xcb\x89\x69\x09\x34\x54\x02\x5c\xc6\x0b\xce\xff\x8d\x06\x5c\x4e\x68\xa0\x33\x70\xad\xca\x29\xcc\xbc\x0c\x8e\x37\x79\x26\x40\x7f\x5a\xcf\x68\x70\x1e\xe3\x1c\xce\x41\xc4\xfe\x72\x9b\xd4\xea\xc9\x0d\xf3\x03\x8a\xf1\x4d\x6c\x7a\x8b\x1c\x5d\xc6\x52\x78\x79\x79\x5e\x1b\xa0\xf3\x89\xd4\x4e\xcc\x85\xa7\x02\x19\x76\x51\x0c\xb7\x5b\x73\xbb\x3c\x86\x01\x72\xac\x3b\x52\xba\xce\x77\x18\xd9\x89\x04\x56\xf6\xc2\xd6\x29\x6c\x81\xc0\xbc\x4b\x65\x18\xe8\xd1\xec\x7c\x5c\xd7\x70\x7e\xc1\xb4\x75\x58\xda\xc9\x31\x12\x23\x01\xe9\x7c\xd2\x39\x64\x90\xb7\x2d\x8a\x32\xd2\x1f\x13\x10\x46\x91\x78\xc2\x2d\xdd\x1a\x25\xcc\x78\x53\xd2\xc9\x67\xf9\xd2\xce\x73\x0c\xe0\xa3\x92\x58\x63\x54\x32\x49\x32\xc4\x70\xdd\xf3\xf0\xfc\x89\x55\x31\x71\x87\xd2\x9d\x52\x61\x50\x35\x12\xcc\xd8\x90\x58\xc9\xe4\xd6\xae\x36\x0d\x61\x7d\xb2\x49\x43\x5f\xe6\x17\xd6\xc0\x5c\xf6\x67\xd2\xff\xc8\x48\xf6\x21\x67\xff\x6a\xe5\x4a\x5b\xcd\xca\xaf\xcf\xa3\x67\xbc\xd3\x59\xef\x77\x0a\x65\xae\x1a\x19\x0d\xff\xfa\x20\xf8\xad\x37\x20\x3f\xdd\x40\xcf\x20\x7d\xc6\x07\x94\x1d\x7e\x2f\xa0\x49\x4d\xbf\x95\x98\x9d\xf9\xa2\xf2\x62\xf7\xb3\xcc\x6b\xf4\xde\x4d\x3a\x98\x8b\x46\x2d\x92\x2b\xfd\x3c\xfb\xa9\x77\xef\xc3\x0d\x4e\x25\x93\x58\xd0\xce\xd4\x3f\xb0\x3a\xc2\x76\x4f\x80\xdb\xed\x65\xc8\x30\x28\xf6\x52\xa2\x50\x6f\x87\xc3\xb4\x2f\xf9\x3c\xfd\xe1\x7c\x1d\x22\xe9\x06\xf4\x4b\x37\x21\x87\xa5\x78\x19\x33\x81\xd4\xde\x82\xdc\x2e\x1b\x5b\xb7\xdb\xd5\x16\xb2\x09\x62\x8e\x64\xbd\x01\x43\xa1\xe6\x62\x03\x2b\x3a\x47\x94\x69\x65\x17\xff\xd8\xe7\xb5\x19\x52\xd4\x1e\xc5\x6e\x63\xfe\x58\xaf\xe5\x27\x7c\xd4\xef\x39\xab\x14\x8d\x0d\x52\x33\xb8\x76\x90\x31\xbc\x69\x04\xc9\x4b\xef\x18\x4f\x5a\x8e\x22\x62\x4b\x0d\x19\xd3\x72\x5b\xcd\x78\xbf\xc7\x43\xa4\x7f\x7b\xbe\x6c\xe9\x93\x4e\xb7\xa2\x19\x67\xfd\x54\x88\xec\xdf\x79\x80\xfe\x0d\x3e\x01\x61\xea\x24\x5f\x5a\xe9\xa3\xac\x5f\xc3\xca\x2c\x6f\xdd\x7b\x9b\x0c\x5e\xd8\xa9\x5b\xdf\x6c\xa1\x8f\xcb\xee\x1b\x53\xc5\x3d\x68\xd3\xa5\xe9\x46\x72\x2d\xf2\x0e\x61\xb5\xa1\x1d\x92\x55\x76\xf6\x7c\x03\x0a\x02\x9e\x77\xca\x1c\xc3\x5e\xf4\x05\xa4\x7a\xb2\x8f\x99\x77\x6a\x46\xfd\x13\x5d\x05\xfe\x42\xd9\x40\xb3\x57\xbe\x13\x99\x5b\xf7\x8d\xf1\xf7\x7f\x6e\x6e\xa0\x6d\x5a\xb2\xf7\xaf\xa6\x81\x5f\x43\x66\x92\x38\xb9\x52\x52\x53\x4a\x8f\x6e\xf7\x72\x3b\x90\xcc\xb7\xe6\x50\xfa\xb0\x3b\xb2\x65\xdf\x83\x5b\xaf\x6d\xf5\x0d\x78\x9c\xc4\xda\xc5\x5f\xdb\xf8\xa3\x45\x99\xf9\xe8\xf6\x7b\x94\x73\x84\x57\xa3\x43\x4a\x63\xbd\xda\xd8\x6b\x4b\xf3\x80\x52\xb2\x12\x0d\x0c\x2c\x40\xe5\x8c\x43\x91\x73\x0e\x4d\xab\x58\xcd\xba\xfe\x3a\x33\xd3\x00\x4f\x2d\xca\xa9\xca\xd3\xc5\x4c\xed\x61\x10\x94\x58\xe5\x7b\xae\x74\x72\x6d\x2e\x58\x11\x55\xb5\x5a\x7e\x69\x25\x13\xaa\x8a\xae\x7e\x17\x3b\xd1\x7c\x13\xc6\x05\xfe\xff\x70\x95\xf8\x4d\x17\x9b\x9b\x8f\xf9\x32\xe2\xef\x00\x00\x00\xff\xff\xd0\x89\x42\xf8\xff\x12\x00\x00")

func AvlGoBytes() ([]byte, error) {
	return bindataRead(
		_AvlGo,
		"../../avl.go",
	)
}

func AvlGo() (*asset, error) {
	bytes, err := AvlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../avl.go", size: 4863, mode: os.FileMode(420), modTime: time.Unix(1573385617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../avl.go": AvlGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"avl.go": &bintree{AvlGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
