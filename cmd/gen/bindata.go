// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../avl.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _AvlGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x8f\xdb\x36\x13\x3e\x4b\xbf\x62\xde\x4b\x20\x6d\xe4\x0f\x39\x97\x17\x06\x94\x53\xd2\x34\x48\xd2\x02\x29\xd0\xcb\xc2\x68\xb4\xd2\x78\x4d\x98\xa2\x54\x8a\xde\x8f\x1a\xfe\xef\xc5\xf0\x43\xa2\x6c\xc9\x49\xda\x00\xcd\x61\x63\x93\x9c\x67\x9e\x99\x67\x48\x0e\xdd\xe4\xc5\x3e\xbf\x47\xa8\x65\x59\xe5\x4d\x18\xaa\xe7\x06\xe1\xad\x50\xf2\x19\x5a\x25\x0f\x85\x82\x63\x18\x7c\xc0\x67\x00\xf8\x80\xcf\x61\xf0\x7b\xce\x0f\x08\xfa\x6f\x78\xb2\xcb\x7f\x95\xe5\xa7\xbc\xf1\xd6\x1b\x7b\x00\x03\x14\x06\x3b\xb0\xff\x98\x50\x61\x50\xec\x18\x2f\x25\x0a\xb8\x5d\x6d\x6e\x8c\x2d\x41\x6d\x0f\xa2\x80\x48\x80\x1d\x8a\xe1\x67\x64\xf7\x3b\x15\xc5\x64\x45\xa8\x6c\x0b\x02\xb2\x0c\x04\xe3\xf4\x35\x90\xa8\x0e\x52\xc0\x32\x0c\x4e\xa1\xfb\x22\xe6\x3b\xc2\x5a\x2c\xa0\x3d\x6c\xb7\xec\x09\xfe\xb0\xe4\x58\x0b\x02\xb1\xc4\x12\xee\xb0\xc8\x0f\x2d\x82\xda\xb1\x16\x1e\x19\xe7\x70\x8f\x0a\xda\x06\x0b\x96\x73\xd6\x62\x09\x4c\x40\x51\x97\x78\x8f\xc2\x90\x2a\xea\xea\x8e\x09\x2c\xdf\x60\xa3\x76\x16\x30\x12\x69\x02\x62\xd5\xb3\xb5\x24\xcb\x14\xd6\x19\x88\x74\xee\xd8\x87\x41\xb9\xd2\x43\x2b\x6f\xe8\x21\x97\x50\x9a\x6c\xb0\x2d\x94\x29\xbc\x86\x72\xa5\x83\x2a\x21\x83\x32\x0d\x83\x13\x20\x6f\xb1\x1f\x5a\xf9\x51\x96\xf0\x12\xd2\x1f\x1f\x67\xb5\x77\xc1\xa1\x16\x50\xab\x97\x00\xc7\xad\x72\x71\x26\x20\x29\x86\x3e\x6c\xfb\x81\x88\x5a\x72\x2f\xcc\x08\x31\xd7\x00\x6b\x12\x5e\x03\x26\x61\x10\xec\xd6\xae\x16\x46\xb3\x4a\xbe\xac\x8f\x98\x96\xbb\x5a\x59\x7b\xc5\x72\xf4\x16\x9d\x12\xca\x4b\x5f\x3d\x75\x89\x3d\xb7\x77\xa8\xa2\x3d\x3e\x53\xe1\xc6\x10\x3d\xf4\x95\x9b\x40\xbd\x87\xbb\xba\xe6\xb1\xab\x2b\xb2\xf3\x4a\xab\xde\x43\x06\xdb\x9c\xb7\xd8\xd7\xd9\x62\x01\x87\x96\x89\x7b\x10\x79\x85\x25\x98\xd1\x16\xda\x1a\x1e\x11\xf6\x88\x0d\xa8\x1d\xc2\x5f\x28\x6b\x30\xae\xb6\xb5\x84\x2f\xfa\xe3\x17\x2d\x1e\xdb\xc2\x1e\x9f\xe7\x1f\xb1\x6d\x35\xd1\xb9\x4e\xcf\x5c\xb3\xf3\xea\x59\x4f\xb9\xb8\x6f\x97\x9b\xb9\x0d\x23\x76\x20\x43\x5b\x83\xb7\xbf\x0a\x92\x9e\x81\x2c\x16\x80\x7f\x1e\x72\x1e\x0e\x96\x1b\x48\x9b\x20\x25\xcd\x06\x1f\xcb\xeb\x7b\xd1\xa2\xec\x52\x9b\x80\x97\xd9\x41\x41\x8c\x24\xd6\xfa\xeb\x2b\x4d\x3b\x3d\xee\x3b\x98\x53\x42\x6b\xf5\x1f\xc3\x15\xfb\x22\x74\xc5\x47\xbb\xa9\x23\x9c\x5c\x24\xec\x7c\x24\xdd\x7c\x43\xda\x34\x70\x66\x1c\xcc\xfb\x00\x2d\xab\xb8\xdb\x90\x5f\x13\x51\x6f\x96\x4c\xd3\xbd\x06\x73\x04\xa7\x41\x1b\x06\x26\x46\xc8\xe0\x22\x19\xfe\xa6\x97\xb5\xca\x15\x0e\x76\xe8\x20\x2d\xf1\x94\x5c\x9f\xb1\xaa\x1f\xb0\xdf\x09\xdf\xa4\x90\x60\xfc\x3f\x4b\x7f\x4f\xf8\x9f\xe5\x7d\xcc\x7e\x98\xf0\x2a\x7f\xa2\x30\xf4\xea\x4f\xf9\x13\x1d\xc9\xc4\x91\x86\xbd\x54\x74\x99\x27\x56\x61\xe0\x9f\xc9\x63\xfe\xaa\xfc\x49\xf3\xa1\x69\xa7\xe8\x4d\x95\x3f\x91\xe5\x77\x0b\xf9\x63\x4f\xf6\x11\x97\xdf\x7b\xba\xb3\xad\x55\xc7\xdd\x62\x33\x1d\x7b\x77\x49\xbf\x86\xd4\x24\x99\x55\x0d\x67\xd8\x5a\xa8\xff\x65\xa6\x94\xe8\xcc\xa1\xd3\x93\xa3\xf6\x48\x9a\x73\x92\xc0\x60\x7a\xe5\x43\x33\x72\x64\x86\xca\x88\x48\x5c\xbb\x36\x78\x3c\x93\xf2\x8c\x12\xa9\xb1\x58\x40\x59\x1f\xee\x38\x9a\x44\xb0\x5a\x78\xea\xf6\x67\x11\x0d\x06\x92\xdb\xc2\xd6\xdf\xce\xae\xc4\x4e\x27\xee\x53\x8e\xcf\xd7\x1a\xea\x36\xc1\xfe\xda\x74\x93\x80\x94\x66\x7d\x6c\xea\xe2\x92\xc6\xc0\x7a\x92\x40\xac\x91\xdc\x9d\x30\xd0\x62\x36\x14\xea\x52\x1a\xad\xf9\x88\x32\xae\xd0\x39\xef\x76\xc7\x50\x19\x2e\x2f\x27\xae\x0a\xa3\x11\x13\xe0\x32\x9e\x71\xfe\x2f\x95\xe1\x72\x5c\x19\x4d\xc7\x55\x33\x27\x67\x57\xc5\x71\x79\x94\x67\xb2\x74\x3d\xc7\xb4\x32\xe7\x9e\x46\x40\x1d\x50\xec\xef\xf8\x29\x11\xaf\x1e\xdb\x1f\x51\x0c\x7b\xdf\xf1\x83\x7a\xd0\xfe\xa6\xf0\xf2\xb2\x7f\x30\x40\xe7\x13\xa9\x9d\x98\x72\x4f\x61\x32\x6c\xa3\x18\x6e\x37\xa6\x9f\x3f\x86\x01\x72\xac\x5a\x2a\x81\x2a\xdf\x63\x64\x27\x12\x58\xda\x96\xb6\x55\xd8\x00\x81\x79\x6d\x7c\x18\xe8\xd1\xec\x7c\x5c\xc7\x70\xde\xd2\xdb\x38\x6c\xfe\xc9\x30\x12\x03\x31\xe9\xb2\xd4\x1c\x32\xc8\x9b\x06\x45\x19\xe9\xaf\x09\x08\xa3\x4b\x3c\x62\x96\x6e\x8c\x18\x66\xbc\x2e\xe9\x1a\xb6\xf9\xd2\xc6\x53\x19\xc0\x27\x25\xb1\xc2\xa8\x64\x92\x64\x88\xe1\xa6\xcb\xc3\xd7\xef\xcd\x2d\x13\xf7\x28\xdd\x5d\x19\x06\xd4\x0c\x9a\xb1\x9e\x58\xc9\xe4\xc6\x6e\x43\x0d\x61\x6d\xb2\xd1\x85\xbe\xcc\x2f\xec\x02\xf3\xbc\x9a\xa0\xff\x89\x91\xec\x3d\x67\xbf\xd5\x73\xa1\x2d\x27\xe5\xd7\xb7\xe2\x57\xac\xd3\x49\xeb\xf7\x0a\x65\xae\x30\x72\x9f\x6a\xe9\x63\xe0\xa3\x1b\xed\x1e\x53\x75\x89\xba\x8c\xae\xe3\x7d\xc6\x07\x94\xed\xf7\xc2\x1a\x9a\xfa\xa5\xca\xec\x82\xdf\x54\x5e\xec\x7f\x92\x79\x85\xde\xab\x55\xbb\x74\x3e\xa9\x5c\x72\x85\x24\xfc\xff\x3b\xf3\xce\x6b\x6f\x54\x32\x89\x05\x9d\x5b\xdd\xf3\xb6\x25\x6c\xf7\xc8\xb9\xdd\x5c\xba\x0c\x83\xe2\x20\x25\x0a\xf5\xb6\xbf\x87\x7f\xfc\x95\x3f\x91\x8e\xfe\xaa\xef\x99\xeb\xe2\xf6\x33\x6a\x42\xe8\xb7\xf9\x65\x0c\x09\xa4\xb6\xcf\x73\x67\x7a\x6c\xcd\x6e\x97\x1b\xc8\x46\x12\x7d\xa4\xd5\x6b\x30\x92\xe8\xdc\xae\x61\x49\x97\x97\x32\xdb\xc4\xf9\x3f\x76\xbc\xd6\x3d\x45\x6d\x51\xec\xd7\xe6\x3f\x6b\x35\xff\x05\x9f\xf4\x6b\xda\x16\x00\x8d\xf5\x05\xc4\xe0\xc6\x41\xc6\xf0\xa6\x16\x54\x35\xf4\xe4\xf3\x2a\x86\xa3\x88\xd8\x5c\x43\xc6\xb4\x95\x97\x13\xd6\xef\x50\x7d\xc0\xe7\x28\xa6\xf6\xd9\x33\x67\x73\x5f\x47\x6a\xfd\xa6\xed\xf5\xe3\x28\x8a\xcd\x23\x69\x1a\xa3\xfb\x5d\x65\x04\xc5\x44\x4b\xb6\x74\x96\x0c\xb8\xbf\x86\xa5\x39\x40\x74\x45\xaf\x33\x78\x61\xa7\x6e\xfd\x65\x33\x7d\x53\xb7\x8f\x4c\x15\x3b\xd0\x4b\xe7\xa6\xc6\xc9\xb4\xc8\x5b\x84\xe5\x9a\xce\x60\xb6\xb5\xb3\xe7\x47\x5c\x10\xf0\xbc\x55\xa6\x03\xf0\xbc\xcf\x20\xd5\x93\x9d\xcf\xbc\x55\x13\x35\x70\xa2\x2e\x44\x3f\x91\xeb\x83\xf2\x8d\x68\xb9\x35\x5f\x1b\x7b\xff\xdf\x62\x01\x4d\xdd\xd0\x7a\xbf\x05\x0f\xfc\x18\x32\x43\xe2\xe4\x42\x49\x4d\x28\x1d\xba\xbd\x2d\xec\x40\x32\x5d\xa0\x7d\xe8\xfd\xf9\xcb\xe6\x5d\x25\x6e\xbc\xe2\xd5\x9d\xfe\x90\xc4\xca\xf9\x5f\x59\xff\x83\xad\x9e\xf9\xe8\xf6\xb7\xb1\x73\x84\x57\x83\x6b\x50\x63\xbd\x5a\xdb\x56\xa9\x7e\x40\x29\x59\x89\x06\x06\x66\xa0\x72\xc6\xa1\xc8\x39\x87\xba\x51\xac\x62\x6d\xd7\x42\x4d\x14\xc0\xb5\xad\x39\x16\x79\x3a\x9b\x88\x5d\x5f\xd1\xe6\xb7\x97\xbf\x03\x00\x00\xff\xff\xf2\x45\x89\x15\x43\x14\x00\x00")

func AvlGoBytes() ([]byte, error) {
	return bindataRead(
		_AvlGo,
		"../../avl.go",
	)
}

func AvlGo() (*asset, error) {
	bytes, err := AvlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../avl.go", size: 5187, mode: os.FileMode(420), modTime: time.Unix(1573408339, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../avl.go": AvlGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"avl.go": &bintree{AvlGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
