// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../avl.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _AvlGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x8f\xdb\x36\x13\x3e\x4b\xbf\x62\xde\x4b\x60\x6d\x64\xd9\x72\x2e\x2f\x0c\x28\xa7\xa4\x69\xb0\x49\x0b\xa4\xc0\x5e\x16\x46\xa3\x95\xc6\x6b\xc2\x14\xa5\x52\xf4\x7e\x74\xe1\xff\x5e\x0c\x3f\x24\xca\x96\x9c\xa6\x0d\xd0\x3d\x24\xab\xe1\x7c\x3c\x33\xf3\x90\x43\x6e\x93\x17\xfb\xfc\x1e\xa1\x96\x65\x95\x37\x61\xa8\x9e\x1b\x84\xf7\x42\xc9\x67\x68\x95\x3c\x14\x0a\x5e\xc2\xe0\x1a\xae\xf1\x39\x0c\x6e\xe0\x26\xe7\x07\x0c\x8f\x56\xed\x57\x59\x7e\xce\x1b\x4f\xcf\xd8\x01\x18\x07\x61\xb0\x03\xfb\xc3\x84\x0a\x03\x8e\xc2\xfb\x2a\x76\x8c\x97\x12\x05\xdc\xae\x36\x57\xc6\x13\x39\xde\x1e\x44\x01\x33\x01\x56\x14\xc1\xcf\xc8\xee\x77\x6a\x16\x91\x15\xc5\x60\x5b\x10\x90\x65\x20\x18\xa7\xcf\x40\xa2\x3a\x48\x01\xcb\x30\x38\x86\xee\x43\x24\x3b\xf2\xb5\x58\x40\x7b\xd8\x6e\xd9\x13\xfc\x6e\xa1\xb2\x16\x04\x62\x89\x25\xdc\x61\x91\x1f\x5a\x04\xb5\x63\x2d\x3c\x32\xce\xe1\x1e\x15\xb4\x0d\x16\x2c\xe7\xac\xc5\x12\x98\x80\xa2\x2e\xf1\x1e\x85\x01\x55\xd4\xd5\x1d\x13\x58\xbe\xc3\x46\xed\xac\xc3\x99\x48\x63\x10\xab\x1e\xad\x05\x59\xa6\xb0\xce\x40\xa4\x89\x43\x1f\x06\xe5\x4a\x8b\x56\x9e\xe8\x21\x97\x50\x9a\x6a\xb0\x2d\x94\x29\xbc\x85\x72\xa5\x93\x2a\x21\x83\x32\x0d\x83\x23\x20\x6f\xb1\x17\xad\xfc\x2c\x4b\x78\x0d\xe9\x8f\xcf\xb3\xda\xbb\xe4\x50\xb7\x53\xf7\x32\x06\x8e\x5b\xe5\xf2\x8c\x41\x52\x0e\x7d\xda\xf6\x17\x02\x4a\x5d\x5e\x67\x90\xea\x9c\xb4\xd1\xff\xfa\x66\xd1\xe2\xeb\x4c\x8b\x13\x8e\x42\x67\xc3\xb6\xd6\xdb\xb9\x9e\x96\x77\x8a\x36\xed\x57\x26\x16\xa9\x69\x68\x6b\xa2\x94\x86\x1a\x87\x41\xb0\x5b\x3b\xce\x8d\xf6\x8b\x22\x5b\xf4\x51\x6c\x02\x59\x03\x8e\x82\x04\x8e\x96\x6b\x8f\x97\x2f\x9e\xd5\x31\x26\x2c\x3d\x51\xeb\x12\xfb\x32\x7c\x40\x35\xdb\xe3\x33\xed\x96\x08\x66\x0f\xb4\x59\xcc\x96\x89\xa1\xde\xc3\x5d\x5d\xf3\xc8\x51\x98\xec\x3c\x16\xd7\x7b\xc8\x60\x9b\xf3\x16\x7b\x4a\x2f\x16\x70\x68\x99\xb8\x07\x91\x57\x58\x82\x91\xb6\xd0\xd6\xf0\x88\xb0\x47\x6c\x40\xed\x10\xfe\x44\x59\x83\x09\xb5\xad\x25\x7c\xd5\xbf\x7e\x75\x95\xdd\xe3\x73\xf2\x09\xdb\x56\x03\x4d\x74\xbd\x92\xeb\xc8\xdf\x38\x7a\xc1\x65\x7d\xbb\xdc\x24\x36\x89\xc8\xb9\xf0\x2d\x8d\x2f\x5a\x9d\x76\x91\x9e\xb8\x58\x2c\x00\xff\x38\xe4\x3c\x1c\xa8\x1b\x87\x37\x31\x28\x69\x4e\x94\xb1\x7a\x7e\x14\x2d\xca\xae\xa4\x31\x78\x15\x1d\x70\x6e\xa4\xa0\x36\x56\x4f\x66\x1d\xf0\x65\xdf\xb9\x39\xc6\xa4\xab\xff\x31\x38\xb1\xe7\xb9\xe3\x37\x6d\xd8\x0e\x6c\x7c\x56\xaa\x53\x49\xba\xf9\x66\xc1\xb4\x5b\x47\xec\x3e\x3d\x8b\x29\xea\x76\xfc\xe5\xd6\xe9\x6d\x65\xb7\xd1\x05\x27\x2f\xe0\x6a\xdf\x86\x81\xc9\x0f\x32\x38\x2b\x84\xbf\xb9\x64\xad\x72\x85\x83\x03\x60\x50\x92\x68\xaa\x55\x5f\xb0\xaa\x1f\xb0\x67\xff\xdf\xea\x8e\x60\xfc\x3f\x2a\x7d\x0f\xf7\x9f\xd4\x7c\xcc\x7a\x58\xec\x2a\x7f\xa2\x14\xb4\xf6\xe7\xfc\x89\x4e\x7b\xc2\x47\x62\xaf\x0c\x5d\xd5\x09\x53\x18\xf8\xc7\xfd\x58\xbc\x2a\x7f\x4a\xae\xc9\x53\xd7\xcb\xab\x2a\x7f\x22\xbb\xef\x6e\xe1\x8f\x1d\x19\x23\x21\xbf\x77\x6c\xb8\x29\xd0\x8d\xc7\xb9\xce\xbc\x9b\xfe\x6f\x21\x35\x25\x66\x55\xc3\x19\xb6\x83\x99\x11\x06\x74\xca\xd0\x59\xc9\x51\x47\xa4\x7e\x73\x6a\x80\xf1\xe9\x11\x87\x56\xe4\xc8\x0a\x11\x88\x40\x5c\x9a\x1a\x3c\x9a\x4b\x79\x02\x89\xba\xb1\x58\x40\x59\x1f\xee\x38\x9a\x42\xb0\x5a\x78\xbd\xed\x4f\x20\x12\x06\x92\x5b\x4a\xeb\xaf\x93\x59\xdb\xf5\x89\xfb\x90\xa3\x53\x5d\x03\xdd\x16\xd8\xd7\x4d\x37\x31\x48\x69\xf4\x23\xc3\x8b\x73\x18\x03\xeb\x49\x00\x91\xf6\xe4\x66\xc0\xa0\x17\xf3\x61\xa3\xce\x5b\xe3\x4d\xfd\x41\x67\x1c\xcd\x39\xef\xf6\xc6\xb0\x33\x5c\x9e\x2f\x5c\x6c\x8c\xf6\x18\x03\x97\xd1\x9c\xf3\x7f\xd9\x19\x2e\xc7\x3b\xa3\xe1\x38\x36\x73\x0a\x76\xb1\x39\xae\x8e\xf2\xa4\x2d\xdd\x95\x63\xba\x33\xa7\x91\x46\x9c\x3a\x47\x91\xbf\xe3\xa7\x9a\x78\xf1\xc0\xfe\x84\x62\x78\xa9\x1e\x3f\xa2\x87\xf7\x6a\x3a\x15\xe9\x3a\x36\xe1\x93\xb0\x33\x6c\x67\x11\xdc\x6e\xcc\x5b\xe0\x25\x0c\x90\x63\xd5\x52\x5f\xab\x7c\x8f\x33\xbb\x10\xc3\xd2\x5e\x80\x5b\x85\x0d\x90\x33\xef\xd2\x1f\x06\x5a\x9a\x9d\xca\x35\xb0\xd3\x07\x80\x05\x67\x8b\x4a\x86\x33\x31\xe8\x10\xcd\x3e\x8d\x21\x83\xbc\x69\x50\x94\x33\xfd\x19\x83\x30\xc5\x8e\x46\xcc\xd2\x8d\xa9\xb0\x91\xd7\x25\x4d\x55\x5b\x04\x6d\x3c\x55\x01\x7c\x52\x12\x2b\x9c\x95\x4c\x52\x6d\x23\xb8\xea\xea\xf0\xed\x31\xb8\x65\xe2\x1e\xa5\x1b\x7d\x61\x40\xf7\x39\x23\xeb\x81\x95\x4c\x6e\xfc\x9b\xb2\xb5\xc9\x46\x15\x07\xd7\x66\xab\x60\x9e\x66\x13\xf0\x3f\x33\x22\x45\x8f\xd9\xef\xbb\x4b\x6d\x39\x49\x29\x3d\xe8\xbe\x61\x9d\x4e\x5a\x7f\x54\x28\x73\x85\x33\xf7\x5b\x2d\x7d\x1f\xf8\xe8\xa4\xdd\xd3\xab\x2e\x51\xd3\xe8\xb2\xbf\x2f\xf8\x80\xb2\xfd\x5e\xb7\x06\xa6\x7e\xe5\x32\xab\xf0\x9b\xca\x8b\xfd\x4f\x32\xaf\xd0\x7b\xf1\xea\x90\x2e\x26\xd1\x25\x57\x48\x8d\xff\x7f\x67\xde\x45\xed\x8d\x4a\x26\xb1\xa0\xc3\xa8\x7b\x0c\xb7\xe4\xdb\x3d\x5c\x6e\x37\xe7\x21\xc3\xa0\x38\x48\x89\x42\xbd\xef\x87\xeb\x8f\x9f\xe3\x13\xe5\xe8\xe7\x77\x8f\x5c\x93\xdb\xaf\xa8\x49\xa1\xdf\xe6\xe7\x39\xc4\x90\xda\x6b\x9b\x3b\xa8\x23\x6b\x76\xbb\xdc\x40\x36\x52\xe8\x17\xd2\x5e\x83\x69\x89\xae\xed\x1a\x96\x34\x91\x94\xd9\x26\x2e\xfe\x4b\x87\x6b\xdd\x43\xd4\x16\xc5\x7e\x6d\xfe\xb3\x56\xc9\x2f\xf8\xa4\xdf\xde\x96\x00\x24\xeb\x09\xc4\xe0\xca\xb9\x8c\xe0\x5d\x2d\x88\x35\xf4\x6a\xf3\x18\xc3\x51\xcc\x58\xa2\x5d\x46\xb4\x95\x97\x13\xd6\x1f\x50\x5d\xe3\xf3\x2c\xa2\xdb\xb0\x67\xce\x12\xbf\x8f\xc9\xf5\xb4\xb5\x7e\xe5\xcc\x22\xf3\xda\x99\xf6\x70\x33\xe1\xc1\xe4\x49\x76\x74\x8a\x0c\x50\xbf\x85\xa5\x39\x3a\x34\x97\xd7\x19\xbc\xb2\x4b\xb7\xbe\xda\x5c\x0f\xde\xf6\x91\xa9\x62\x07\x5a\x35\x31\xec\x26\xd3\x22\x6f\x11\x96\x6b\x3a\x7d\xd9\xd6\xae\x9e\x1e\x6e\x41\xc0\xf3\x56\x99\x81\xee\x45\x9f\x43\xaa\x17\xbb\x98\x79\xab\x26\xba\x7f\xa4\x4b\x85\x7e\xdf\xd6\x07\xe5\x1b\x91\xba\x35\x5f\x1b\x7b\xff\x67\xb1\x80\xa6\x6e\x48\xdf\xbf\x4f\x07\x7e\x0e\x99\x01\x71\x74\xa9\xa4\x26\x95\xce\xbb\x9d\x13\x56\x10\x4f\x53\xb3\x4f\xbd\x3f\x79\x59\xd2\x71\x70\xe3\xd1\x56\x5f\xdc\x87\x20\x56\x2e\xfe\xca\xc6\x1f\x6c\xf2\xcc\xf7\x6e\xff\xa2\x76\xea\xe1\xcd\x60\x00\x6a\x5f\x6f\xd6\xf6\xe6\x53\x3f\xa0\x94\xac\x44\xe3\x06\xe6\xa0\x72\xc6\xa1\xc8\x39\x87\xba\x51\xac\x62\x6d\x77\x23\x9a\x20\xc0\xa5\x4d\x39\x96\x79\x3a\x9f\xc8\x5d\x0f\x67\xf3\x87\x93\xbf\x02\x00\x00\xff\xff\x2e\xe4\x64\xec\x71\x14\x00\x00")

func AvlGoBytes() ([]byte, error) {
	return bindataRead(
		_AvlGo,
		"../../avl.go",
	)
}

func AvlGo() (*asset, error) {
	bytes, err := AvlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../avl.go", size: 5233, mode: os.FileMode(420), modTime: time.Unix(1573539411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../avl.go": AvlGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"avl.go": &bintree{AvlGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
