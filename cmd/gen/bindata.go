// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../avl.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _AvlGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5b\x8f\x9b\xc6\x17\x7f\x86\x4f\x71\xfe\x2f\x11\x6c\x30\x36\xce\xcb\x5f\x96\xc8\x53\xd2\x34\xda\xa4\x95\x52\x69\x5f\x56\x56\xc3\xc2\xf1\x7a\xe4\x61\xa0\xc3\x78\x2f\x5d\xf9\xbb\x57\x67\x2e\x30\xd8\xc6\x69\xda\x48\xf5\x43\x02\xc3\xb9\xff\xce\x6d\xb6\x2d\xca\x5d\x71\x8f\xd0\xc8\xaa\x2e\xda\x30\x54\xcf\x2d\xc2\x7b\xa1\xe4\x33\x74\x4a\xee\x4b\x05\x2f\x61\x70\x0d\xd7\xf8\x1c\x06\x37\x70\x53\xf0\x3d\x86\x07\x4b\xf6\xab\xac\x3e\x17\xad\x47\x67\xf8\x00\x8c\x80\x30\xd8\x82\xfd\x31\xa1\xc2\x80\xa3\xf0\xde\xca\x2d\xe3\x95\x44\x01\xb7\xcb\xf5\x95\x91\x44\x82\x37\x7b\x51\x42\x24\xc0\x1e\xc5\xf0\x33\xb2\xfb\xad\x8a\x62\xe2\x22\x1d\x6c\x03\x02\xf2\x1c\x04\xe3\xf4\x1a\x48\x54\x7b\x29\x60\x11\x06\x87\xd0\xbd\x88\x74\x4b\xb2\xe6\x73\xe8\xf6\x9b\x0d\x7b\x82\xdf\xad\xa9\xac\x03\x81\x58\x61\x05\x77\x58\x16\xfb\x0e\x41\x6d\x59\x07\x8f\x8c\x73\xb8\x47\x05\x5d\x8b\x25\x2b\x38\xeb\xb0\x02\x26\xa0\x6c\x2a\xbc\x47\x61\x8c\x2a\x9b\xfa\x8e\x09\xac\xde\x61\xab\xb6\x56\x60\x24\xb2\x04\xc4\x72\xb0\xd6\x1a\x59\x65\xb0\xca\x41\x64\xa9\xb3\x3e\x0c\xaa\xa5\x3e\x5a\x7a\x47\x0f\x85\x84\xca\x44\x83\x6d\xa0\xca\xe0\x2d\x54\x4b\xed\x54\x05\x39\x54\x59\x18\x1c\x00\x79\x87\xc3\xd1\xd2\xf7\xb2\x82\xd7\x90\xfd\x78\x3f\xeb\x9d\x73\x0e\x35\x9c\x1a\xcb\x04\x38\x6e\x94\xf3\x33\x01\x49\x3e\x0c\x6e\xdb\x07\x32\x94\x50\x5e\xe5\x90\x69\x9f\x34\xd3\xff\x06\xb0\xe8\xe3\xeb\x5c\x1f\xa7\x1c\x85\xf6\x86\x6d\xac\xb4\x53\x3a\x7d\xde\x13\x5a\xb7\x5f\x19\x5d\x44\xa6\x4d\x5b\x51\x4a\x69\x53\x93\x30\x08\xb6\x2b\x97\x73\x67\xf1\x22\xcd\xd6\xfa\x38\x31\x8a\x2c\x03\x47\x41\x07\x2e\x2d\x57\x5e\x5e\xbe\x78\x5c\x87\x84\x6c\x19\x12\xb5\xa9\x70\x08\xc3\x07\x54\xd1\x0e\x9f\xa9\x5a\x62\x88\x1e\xa8\x58\x4c\xc9\x24\xd0\xec\xe0\xae\x69\x78\x4c\xee\x6d\x98\xb8\x47\xa9\xd3\xa1\xa9\x30\x0c\x36\x8d\xd4\x5e\xb3\x0d\xd8\x4f\x5e\x7e\x07\xcd\x0e\x72\xd8\x14\xbc\x43\x7a\xb3\x41\x98\xcf\x61\xdf\x31\x71\x0f\xa2\xa8\xb1\x02\x73\xda\x41\xd7\xc0\x23\xc2\x0e\xb1\x05\xb5\x45\xf8\x13\x65\x03\xc6\x0c\xd2\xf1\x55\x3f\x7e\x0d\x03\x8a\x26\x69\xdb\xe1\x73\xfa\x09\xbb\x2e\x32\x6a\x53\x1d\xcf\xf4\x3a\x36\x8a\x9d\x2d\xd6\xa8\xd4\x85\xe6\x76\xb1\x26\x11\x26\x35\x7b\x9b\x1d\xb3\x11\xb8\xa3\x08\x5c\x96\x92\x79\x52\x34\xe5\x7c\x0e\xf8\xc7\xbe\xe0\x9e\x9b\x23\xd1\x37\x09\x28\xb9\x47\x63\xfe\x24\x06\x1f\x45\x87\xb2\x87\x21\x01\x0f\x85\x51\x9e\x52\x1f\x21\xc6\xd3\x56\x32\x14\x80\xd6\xfb\xb2\xeb\xc5\x1c\x12\xa2\xd5\xff\xc4\x3a\x25\x71\xa8\x0d\x57\x13\x16\xd5\xd4\x96\x8d\x7e\xf6\x22\x77\x7c\x42\x51\xb0\xa6\x4c\x44\xd0\x88\x75\xc5\x30\xb8\x67\x6d\x8a\x43\x0f\x8a\x1e\x50\x5f\x5e\x6c\x4b\x6a\x43\x52\x74\xe9\x5d\x10\xf2\x02\x0e\x86\x2e\x0c\x8c\x7f\x90\xc3\x49\x20\xfc\x82\x94\x8d\x2a\x14\x8e\x9a\xc6\x28\x24\xf1\x14\x54\x5f\xb0\x6e\x1e\x70\xa8\x98\xbf\x85\x8e\x60\xfc\x3f\x0a\xfd\x60\xee\x3f\x89\xf9\x39\xee\x71\xb0\xeb\xe2\x89\x5c\xd0\xd4\x9f\x8b\x27\x9a\x10\x64\x1f\x1d\xfb\xfd\xc0\x45\x9d\x6c\x3a\xaa\xa0\x33\xfa\xea\xe2\x29\xbd\x26\x49\x3d\x96\x57\x75\xf1\xe4\x6a\xe8\xbb\x20\xfc\xb1\x63\xe6\x8c\xca\xef\x1d\x35\x6e\x72\xf4\x23\x75\xa6\x3d\xef\x37\x86\xb7\x90\x99\x10\xb3\xba\xe5\x0c\xbb\xd1\x9c\x09\x75\xc3\xa1\x1e\xca\x51\x6b\x24\xbc\x39\x01\x60\x64\x8e\xbb\x9d\x94\x67\xbe\xe8\x0e\xc6\x36\x17\x27\x0d\x8f\x67\x52\x1e\x99\x64\x9b\x5d\xd5\xec\xef\x38\x9a\x40\xb0\x46\x78\xd8\x0e\x1d\x88\x0e\x03\xc9\x6d\x4a\xeb\xb7\xa3\xf9\xdc\xe3\xc4\x7d\x93\xe3\x63\x5a\x63\xba\x0d\xb0\x4f\x9b\xad\x13\x90\xd2\xd0\xc7\x76\x34\x9c\x98\x31\xe2\x9e\x34\x20\xd6\x92\xdc\x50\x1f\x61\x31\x1b\x03\x75\x0a\x8d\xb7\x29\x8c\x90\x71\x69\xce\x79\x5f\x1b\x63\x64\xb8\x3c\xfd\x70\x11\x18\x2d\x31\x01\x2e\xe3\x19\xe7\xff\x12\x19\x2e\xcf\x23\xa3\xcd\x71\xd9\xcc\x49\xd9\x45\x70\x5c\x1c\xe5\x11\x2c\xfd\x9a\x32\x8d\xcc\xb1\xa6\x33\x42\x9d\xa0\xd8\xaf\xf8\x29\x10\x2f\x36\xec\x4f\x28\xc6\x8b\xf8\xf9\x16\x3d\xde\xc5\xa9\x2b\xd2\x0a\x37\x21\x93\x6c\x67\xd8\x45\x31\xdc\xae\xcd\xfd\xe1\x25\x0c\x90\x63\xdd\x11\xae\x75\xb1\xc3\xc8\x7e\x48\x60\x61\x97\xe6\x4e\x61\x0b\x24\xcc\xbb\x28\x84\x81\x3e\xcd\x8f\xcf\xdd\x66\x25\xce\x34\x51\x1b\x54\x62\x8c\xc4\x08\x21\x9a\x7d\xda\x86\x1c\x8a\xb6\x45\x51\x45\xfa\x35\x01\x61\x82\x1d\x9f\x61\xcb\xd6\x26\xc2\xe6\xbc\xa9\x68\xaa\xda\x20\x68\xe6\xa9\x08\xe0\x93\x92\x58\x63\x54\x31\x49\xb1\x8d\xe1\xaa\x8f\xc3\xb7\xc7\xe0\xb9\x5d\xf2\x78\xd3\xaa\x98\x5c\xfb\xdb\xf5\xe4\x4a\x46\x84\xa3\x55\xdb\xdf\xbf\xa6\xcc\xff\xcc\x28\x29\x06\x9b\x7d\xdc\x9d\x6b\x8b\xc9\x94\xd2\x83\xee\x1b\xdc\xd9\x24\xf7\x47\x85\xb2\x50\x18\xb9\x27\xb3\x48\x3b\x19\xf8\xe8\x4e\xfb\xeb\x5a\x53\xa1\x4e\xa3\xcb\xf2\xbe\xe0\x03\xca\xee\x7b\xc5\x1a\x33\xf5\xcd\x98\x59\x82\xdf\x54\x51\xee\x7e\x92\x45\x8d\xde\x2d\x59\xab\x74\x3a\x29\x5d\x0a\x85\x04\xfc\xff\x7b\xf6\x5e\xeb\xc0\x54\x31\x89\x25\x35\xa3\xfe\x02\xdd\x91\x6c\x77\xd9\xb9\x5d\x9f\xaa\x0c\x83\x72\x2f\x25\x0a\xf5\x7e\x18\xae\x3f\x7e\x8e\x4f\x84\x63\x98\xdf\x83\xe5\x3a\xb9\xfd\x88\x1a\x17\x86\x32\x3f\xf5\x21\x81\xcc\xae\x6d\xae\x51\xc7\x96\xed\x76\xb1\x86\xfc\x4c\xa0\x5f\x88\x7a\x05\x06\x12\x1d\xdb\x15\x2c\x68\x22\x29\x53\x26\x4e\xff\x4b\x6f\xd7\x6a\x30\x51\x73\x94\xbb\x95\xf9\xcf\x72\xa5\xbf\xe0\x93\xbe\xaf\xdb\x04\xa0\xb3\x21\x81\x18\x5c\x39\x91\x31\xbc\x6b\x04\x65\x0d\xdd\xf4\xbc\x8c\xe1\x28\x22\x96\x6a\x91\x31\x95\xf2\x62\x82\xfb\x03\xaa\x6b\x7c\x8e\x62\xda\x86\x3d\x76\x96\xfa\x38\xa6\xd7\xd3\xdc\xfa\x96\x13\xc5\xe6\xb6\x33\x2d\xe1\x66\x42\x82\xf1\x53\xdf\x50\x1b\x39\xb6\xfa\x2d\x2c\x4c\xeb\xd0\xb9\xbc\xca\xe1\x95\xfd\x74\xeb\x93\xcd\xf4\xe0\xed\x1e\x99\x2a\xb7\xa0\x49\x53\x93\xdd\xc4\x5a\x16\x1d\xc2\x62\x45\xdd\x97\x2e\x8d\xfa\xeb\x71\x73\x0b\x02\x5e\x74\xca\x0c\x74\x4f\xfb\x0c\x32\xfd\xb1\xd7\x59\x74\x6a\x02\xfd\x03\x2d\x15\xfa\xde\xdb\xec\x95\xcf\x44\xe4\x96\x7d\x65\xf8\xfd\xdf\x7c\x0e\x6d\xd3\x12\xbd\xbf\x4f\x07\xbe\x0f\xb9\x31\xe2\xe0\x5c\xc9\x8c\x2b\xbd\x74\x3b\x27\xec\x41\x32\x9d\x9a\x83\xeb\x43\xe7\x65\x69\x9f\x83\x6b\x2f\x6d\xf5\xe2\x3e\x36\x62\xe9\xf4\x2f\xad\xfe\x51\x91\xe7\xbe\x74\xfb\x57\xb8\x63\x09\x6f\x46\x03\x50\xcb\x7a\xb3\xb2\x9b\x4f\xf3\x80\x52\xb2\x0a\x8d\x18\x98\x81\x2a\x18\x87\xb2\xe0\x1c\x9a\x56\xb1\x9a\x75\xfd\x46\x34\x91\x00\x97\x8a\xf2\x9c\xe7\xd9\x6c\xc2\x77\x3d\x9c\xcd\x45\xff\xaf\x00\x00\x00\xff\xff\x11\xcd\x44\x7b\xa5\x14\x00\x00")

func AvlGoBytes() ([]byte, error) {
	return bindataRead(
		_AvlGo,
		"../../avl.go",
	)
}

func AvlGo() (*asset, error) {
	bytes, err := AvlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../avl.go", size: 5285, mode: os.FileMode(420), modTime: time.Unix(1573540729, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../avl.go": AvlGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"avl.go": &bintree{AvlGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
