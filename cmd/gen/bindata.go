// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../avl.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _AvlGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x8f\xdb\x36\x10\x3d\x4b\xbf\x62\xba\x40\x03\x69\x23\x7f\xc8\xb9\x14\x06\x94\x53\xd2\x34\x48\xd2\x02\x09\xda\xcb\xc2\x68\xb4\xd2\x68\x4d\x98\xa2\x54\x8a\xde\x8f\x1a\xfe\xef\xc5\x90\x94\x44\xd9\x92\x93\xb4\x01\x9a\xc3\xc6\x26\x39\x33\x6f\xe6\x3d\x92\x43\xd7\x69\xb6\x4b\xef\x10\x2a\x99\x97\x69\xed\xfb\xac\xac\x2b\xa9\xe0\xaa\x28\xd5\x95\xef\xab\xa7\x1a\xe1\xb5\x50\xf2\x09\x1a\x25\xf7\x99\x82\x83\xef\xbd\xc3\x27\x00\x78\x87\x4f\xbe\xf7\x47\xca\xf7\x08\xfa\xaf\x7f\xb4\xcb\x7f\x93\xf9\x87\xb4\x76\xd6\x1b\x7b\x00\xe3\xc8\xf7\xb6\x60\xff\x31\xa1\x7c\x2f\xdb\x32\x9e\x4b\x14\x70\xb3\xda\x5c\x1b\x5b\x72\x55\xec\x45\x06\x81\x00\x3b\x14\xc2\x2f\xc8\xee\xb6\x2a\x08\xc9\x8a\xbc\xb2\x02\x04\x24\x09\x08\xc6\xe9\xab\x27\x51\xed\xa5\x80\xa5\xef\x1d\xfd\xf6\x8b\x98\x6f\xc9\xd7\x62\x01\xcd\xbe\x28\xd8\x23\xfc\x69\xc1\xb1\x06\x04\x62\x8e\x39\xdc\x62\x96\xee\x1b\x04\xb5\x65\x0d\x3c\x30\xce\xe1\x0e\x15\x34\x35\x66\x2c\xe5\xac\xc1\x1c\x98\x80\xac\xca\xf1\x0e\x85\x01\x95\x55\xe5\x2d\x13\x98\xbf\xc2\x5a\x6d\xad\xc3\x40\xc4\x11\x88\x55\x8f\xd6\x82\xcc\x63\x58\x27\x20\xe2\x79\x8b\xde\xf7\xf2\x95\x1e\x5a\x39\x43\xf7\xa9\x84\xdc\x54\x83\x15\x90\xc7\xf0\x12\xf2\x95\x4e\x2a\x87\x04\xf2\xd8\xf7\x8e\x80\xbc\xc1\x7e\x68\xe5\x66\x99\xc3\x73\x88\xbf\x7f\x9e\xe5\xae\x4d\x0e\x35\x81\x9a\xbd\x08\x38\x16\xaa\xcd\x33\x02\x49\x39\xf4\x69\xdb\x0f\x04\xd4\x82\x7b\x66\x46\x08\xb9\x76\xb0\x26\xe2\xb5\xc3\xc8\xf7\xbc\xed\xba\xd5\xc2\x68\x55\x29\x96\x8d\x11\xd2\xf2\x56\x2b\x6b\x47\x2c\x07\x67\xd1\x31\xa2\xba\xf4\xea\xa9\x72\xec\xb1\xbd\x41\x15\xec\xf0\x89\x84\x1b\x42\x70\xdf\x2b\x37\x82\x6a\x07\xb7\x55\xc5\xc3\x56\x57\x64\xe7\x48\xab\xda\x41\x02\x45\xca\x1b\xec\x75\xb6\x58\xc0\xbe\x61\xe2\x0e\x44\x5a\x62\x0e\x66\xb4\x81\xa6\x82\x07\x84\x1d\x62\x0d\x6a\x8b\xf0\x37\xca\x0a\x4c\xa8\xa2\x92\xf0\x59\x7f\xfc\xac\xc9\x63\x05\xec\xf0\x69\xfe\x1e\x9b\x46\x03\x9d\xeb\xf2\xcc\x35\x3a\x47\xcf\x7a\xaa\xcd\xfb\x66\xb9\x99\xdb\x34\xc2\xd6\xc9\xd0\xd6\xf8\xdb\x5d\x74\x12\x9f\x38\x59\x2c\x00\xff\xda\xa7\xdc\x1f\x2c\x37\x2e\x6d\x81\x94\x34\x1b\x7c\xac\xae\x6f\x45\x83\xb2\x2b\x6d\x04\x4e\x65\x07\x82\x18\x29\xac\x8d\xd7\x2b\x4d\x07\x3d\xec\x3a\x37\xc7\x88\xd6\xea\x3f\x06\x2b\xf6\x22\x6c\xc5\x47\xbb\xa9\x03\x1c\x9d\x15\xec\x74\x24\xde\x7c\x45\xd9\xb4\xe3\xc4\x04\x98\xf7\x09\x5a\x54\x61\xb7\x21\xbf\x44\xa2\xde\x2c\x89\x86\x7b\xc9\xcd\x01\x5a\x0e\x1a\xdf\x33\x39\x42\x02\x67\xc5\x70\x37\xbd\xac\x54\xaa\x70\xb0\x43\x07\x65\x09\xa7\xe8\xfa\x88\x65\x75\x8f\xfd\x4e\xf8\x2a\x86\x04\xe3\xff\x5b\xf9\x7b\xc0\xff\xae\xee\x63\xf6\xc3\x82\x97\xe9\x23\xa5\xa1\x57\x7f\x48\x1f\xe9\x48\x26\x8c\x34\xec\x94\xa2\xab\x3c\xa1\xf2\x3d\xf7\x4c\x1e\x8b\x57\xa6\x8f\x1a\x0f\x4d\xb7\x8c\x5e\x97\xe9\x23\x59\x7e\x33\x91\xdf\xf7\x64\x1f\x09\xf9\xad\xa7\x3b\x2b\x2c\x3b\xed\x2d\x36\xd3\xb9\x77\x97\xf4\x4b\x88\x4d\x91\x59\x59\x73\x86\x8d\x75\xf5\x43\x62\xa4\x44\x67\x0e\x9d\x9e\x1c\x75\x44\xe2\x9c\x13\x05\xc6\xa7\x23\x1f\x9a\x91\x23\x33\x24\x23\x02\x71\xe9\xda\xe0\xe1\x4c\xca\x13\x48\xc4\xc6\x62\x01\x79\xb5\xbf\xe5\x68\x0a\xc1\x2a\xe1\xb0\xdb\x9f\x45\x34\xe8\x49\x6e\x85\xad\xbf\x9d\x5c\x89\x1d\x4f\xdc\x85\x1c\x9e\xae\x35\xd0\x6d\x81\xdd\xb5\xf1\x26\x02\x29\xcd\xfa\xd0\xe8\xe2\x1c\xc6\xc0\x7a\x12\x40\xa8\x3d\xb5\x77\xc2\x80\x8b\xd9\x90\xa8\x73\x6a\x34\xe7\x23\xcc\xb4\x42\xe7\xbc\xdb\x1d\x43\x66\xb8\x3c\x9f\xb8\x48\x8c\xf6\x18\x01\x97\xe1\x8c\xf3\xff\xc8\x0c\x97\xe3\xcc\x68\x38\xad\x9a\x39\x05\xbb\x48\x4e\x5b\x47\x79\x42\x4b\xd7\x73\x4c\x33\x73\x1a\x69\xc4\x69\xeb\x28\x74\x77\xfc\x14\x89\x17\x8f\xed\xf7\x28\x86\xbd\xef\xf8\x41\x3d\x68\x7f\x63\x78\x7e\xde\x3f\x18\x47\xa7\x13\xb1\x9d\x98\x0a\x4f\x69\x32\x6c\x82\x10\x6e\x36\xa6\x9f\x3f\xf8\x1e\x72\x2c\x1b\x92\x40\x99\xee\x30\xb0\x13\x11\x2c\x6d\x4b\xdb\x28\xac\x81\x9c\x39\x6d\xbc\xef\xe9\xd1\xe4\x74\x5c\xe7\x70\xda\xd2\xdb\x3c\x6c\xfd\xc9\x30\x10\x03\x32\xe9\xb2\xd4\x18\x12\x48\xeb\x1a\x45\x1e\xe8\xaf\x11\x08\xc3\x4b\x38\x62\x16\x6f\x0c\x19\x66\xbc\xca\xe9\x1a\xb6\xf5\xd2\xc6\x53\x15\xc0\x47\x25\xb1\xc4\x20\x67\x92\x68\x08\xe1\xba\xab\xc3\x97\xef\xcd\x82\x89\x3b\x94\xed\x5d\xe9\x7b\xd4\x0c\x9a\xb1\x1e\x58\xce\xe4\xc6\x6e\x43\xed\xc2\xda\x24\xa3\x0b\x5d\x9a\x9f\xd9\x05\xe6\x79\x35\x01\xff\x03\x23\xda\x7b\xcc\x6e\xab\xd7\xa6\xb6\x9c\xa4\x5f\xdf\x8a\x5f\xb0\x8e\x27\xad\xdf\x2a\x94\xa9\xc2\xa0\xfd\x54\x49\xd7\x07\x3e\xb4\xa3\xdd\x63\xaa\xca\x51\xcb\xe8\xb2\xbf\x8f\x78\x8f\xb2\xf9\x56\xb7\x06\xa6\x7e\xa9\x32\xbb\xe0\x93\x4a\xb3\xdd\xcf\x32\x2d\xd1\x79\xb5\xea\x90\x6d\x4c\x92\x4b\xaa\x90\x88\xff\xa9\x33\xef\xa2\xf6\x46\x39\x93\x98\xd1\xb9\xd5\x3d\x6f\x1b\xf2\xdd\x3e\x72\x6e\x36\xe7\x21\x7d\x2f\xdb\x4b\x89\x42\xbd\xee\xef\xe1\xef\x7f\xe5\x4f\x94\xa3\xbf\xea\x7b\xe4\x5a\xdc\x6e\x45\x4d\x0a\xfd\x36\x3f\xcf\x21\x82\xd8\xf6\x79\xed\x99\x1e\x5a\xb3\x9b\xe5\x06\x92\x91\x42\x1f\x68\xf5\x1a\x0c\x25\xba\xb6\x6b\x58\xd2\xe5\xa5\xcc\x36\x69\xe3\x1f\x3a\x5c\xeb\x1e\xa2\xb6\xc8\x76\x6b\xf3\x9f\xb5\x9a\xff\x8a\x8f\xfa\x35\x6d\x05\x40\x63\xbd\x80\x18\x5c\xb7\x2e\x43\x78\x55\x09\x52\x0d\x3d\xf9\x1c\xc5\x70\x14\x01\x9b\x6b\x97\x21\x6d\xe5\xe5\x84\xf5\x1b\x54\xef\xf0\x29\x08\xa9\x7d\x76\xcc\xd9\xdc\xe5\x91\x5a\xbf\x69\x7b\xfd\x38\x0a\x42\xf3\x48\x9a\xf6\xd1\xfd\xae\x32\xe2\xc5\x64\x4b\xb6\x74\x96\x0c\xb0\xbf\x84\xa5\x39\x40\xb4\xa2\xd7\x09\x3c\xb3\x53\x37\xee\xb2\x99\xbe\xa9\x9b\x07\xa6\xb2\x2d\xe8\xa5\x73\xa3\x71\x32\xcd\xd2\x06\x61\xb9\xa6\x33\x98\x15\x76\xf6\xf4\x88\xf3\x3c\x9e\x36\xca\x74\x00\x4e\xf4\x19\xc4\x7a\xb2\x8b\x99\x36\x6a\x42\x03\x47\xea\x42\xf4\x13\xb9\xda\x2b\xd7\x88\x96\x5b\xf3\xb5\xb1\x77\xff\x2d\x16\x50\x57\x35\xad\x77\x5b\x70\xcf\xcd\x21\x31\x20\x8e\x6d\x2a\xb1\x49\xa5\xf3\x6e\x6f\x0b\x3b\x10\x4d\x0b\xb4\x4f\xbd\x3f\x7f\xd9\xbc\x53\xe2\xc6\x11\xaf\xee\xf4\x87\x20\x56\x6d\xfc\x95\x8d\x3f\xd8\xea\x89\xeb\xdd\xfe\x36\x76\xea\xe1\xc5\xe0\x1a\xd4\xbe\x5e\xac\x6d\xab\x54\xdd\xa3\x94\x2c\x47\xe3\x06\x66\xa0\x52\xc6\x21\x4b\x39\x87\xaa\x56\xac\x64\x4d\xd7\x42\x4d\x08\xe0\xd2\xd6\x1c\xcb\x3c\x9e\x4d\xe4\xee\x7b\x5e\x8e\x45\xba\xe7\x4a\x83\xab\x53\xc1\xb2\xa0\x28\xd5\xfc\x53\x2d\x99\x50\x45\x70\xf5\xbb\xd8\x89\xea\x41\x18\x13\xf8\xf1\xfe\x2a\x72\x45\x17\x9a\x26\xcb\xfc\x7a\xf3\x4f\x00\x00\x00\xff\xff\xf2\xe5\xf2\x6e\x93\x14\x00\x00")

func AvlGoBytes() ([]byte, error) {
	return bindataRead(
		_AvlGo,
		"../../avl.go",
	)
}

func AvlGo() (*asset, error) {
	bytes, err := AvlGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../avl.go", size: 5267, mode: os.FileMode(420), modTime: time.Unix(1573405951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../avl.go": AvlGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"avl.go": &bintree{AvlGo, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
